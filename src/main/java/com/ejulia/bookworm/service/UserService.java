package com.ejulia.bookworm.service;

import com.ejulia.bookworm.entity.User;
import com.ejulia.bookworm.dao.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    //Means to get the following bean (autogenerated bean userRepository, used to handle data)
    @Autowired
    private UserRepository userRepository;

    @Transactional
    public String addUser(String firstName, String lastName, String phone, String email) {
        User n = new User();
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setPhone(phone);
        n.setEmail(email);
        // TODO_suggestion : eg I will check there is not already a user registered with this email in our database
        userRepository.save(n);
        return "User registered";
    }

    @Transactional
    public String deleteUser(Integer userId)  {
        userRepository.deleteById(userId);
        return "User deleted";
    }

    @Transactional(readOnly = true)
    public Optional<User> getUser(Integer userId) {
        return userRepository.findById(userId);
    }

    @Transactional(readOnly = true)
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @Transactional(readOnly = true)
    public List<User> getByFirstName(String firstName) {
        return userRepository.findByFirstNameContaining(firstName);
    }

    @Transactional(readOnly = true)
    public List<User> getByLastName(String lastName) {
        return userRepository.findByLastNameContaining(lastName);
    }

    @Transactional
    public String editUser(Integer userId, String firstName, String lastName, String phone, String email) throws Exception {
        Optional<User> optionalUser = userRepository.findById(userId);
        User user = optionalUser.orElseThrow(() -> new Exception("user not found"));
        if (!firstName.isEmpty()) { user.setFirstName(firstName); }
        if (!lastName.isEmpty()) { user.setLastName(lastName); }
        if (!phone.isEmpty()) { user.setPhone(phone); }
        if (!email.isEmpty()) { user.setEmail(email); }
        userRepository.save(user);
        return "User edited";
    }
}
